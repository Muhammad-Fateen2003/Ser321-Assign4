apply plugin: 'application'

repositories {
    mavenCentral()
}

dependencies {
   implementation group: 'org.json', name: 'json', version: '20200518'
}

//define main class
mainClassName = 'Concentration'
def host = 'localhost'
def port = 8000
def pool = 2

// task reading in the arguments if any given, if not the default from above will be used
task arguments {
  if (project.hasProperty("host")) {
    host = project.getProperty("host")
  }
  if (project.hasProperty("port")) {
    port = project.getProperty("port")
  }
  if (project.hasProperty("pool")) {
    pool = project.getProperty("pool");
  }
}

task runClient(type: JavaExec) {
  group 'client'
  description 'Creates client socket sends a message to the server'

  classpath = sourceSets.main.runtimeClasspath
  standardInput = System.in

  main = 'tasks.Client'
  standardInput = System.in

  // run with arguments e.g.: gradle runClient -Phost=localhost -Pport=8000 -q --console=plain
  args host
  args port
}

task runTask1(type: JavaExec) {
  group 'server'
  description 'Creates Server socket waits for messages'

  classpath = sourceSets.main.runtimeClasspath

  main = 'tasks.Server'
  standardInput = System.in

  // run with arguments e.g.: gradle runServer -Pport=8000 -q --console=plain
  args port
}

task runTask2(type: JavaExec) {
  group 'server'
  description 'Creates Server socket waits for messages'

  classpath = sourceSets.main.runtimeClasspath

  main = 'tasks.ThreadedServer'
  standardInput = System.in

  // run with arguments e.g.: gradle runServer -Pport=8000 -q --console=plain
  args port
}

task runTask3(type: JavaExec) {
  group 'server'
  description 'Creates Server socket waits for messages'

  classpath = sourceSets.main.runtimeClasspath

  main = 'tasks.ThreadedPoolServer'
  standardInput = System.in

  // run with arguments e.g.: gradle runServer -Pport=8000 -Ppool=2 -q --console=plain
  args port
  args pool
}
